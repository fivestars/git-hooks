#!/usr/bin/env bash
set -eu -o pipefail

: <<DESC
Validate the format of a commit message for Jira-tracked projects
DESC

# Get our useful functions (be sure to provide lib path as source argument)
# shellcheck source=included/lib/jira.sh
. "$(dirname "${BASH_SOURCE[@]}")/../../lib/jira.sh" "$(dirname "${BASH_SOURCE[@]}")/../../lib"

commit_msg="$1"

# Lets just send all output to stderr
exec >&2

if [[ -f $(git rev-parse --git-dir)/MERGE_HEAD ]]; then
    # This is a merge commit, don't enforce rules
    exit
fi

if [[ "$(sed -e '/^#.*/d' -e '/^$/d' "$commit_msg" | wc -l)" -eq 0 ]]; then
    # Allow git commit to abort normally on an empty commit message
    exit
fi

# Save the msg in case our commit fails and we want to preload it next time
# in prepare-commit-msg-template.
cat "$commit_msg" >"$(get_cached_commit_message_filename)"

# Sentinel value set to false if any checks fail. This allows us to get output
# from multiple failed checks.
success=true

# Remove comments and leading newlines
sed -i.bckp -e 's/^#.*//' -e '/./,$!d' "$commit_msg"; rm -f "${commit_msg}.bckp"

# Remove duplicate newlines
# TODO: this actually removes all duplicate lines which is possibly dangerous
# shellcheck disable=SC2094
{ rm "$commit_msg"; uniq >"$commit_msg"; } <"$commit_msg"

jira_issue_regex="\\[[A-Z]\\+-[0-9]\\+\\]"

subject=$(head -n 1 "$commit_msg")

# Check subject line has Jira issue
if ! jira_issue=$(grep -o "^${jira_issue_regex}" <<<"$subject"); then
    printf "${c_error}%s${c_value}%s${c_error}%s${c_reset}\\n" "Commit message subject must begin with a " "[JIRA-####]" " label"
    printf "${c_error}%s${c_reset}\\n" "===================================================================================================="
    printf "${c_error}%s${c_reset}\\n" "$subject"
    printf "${c_error}%s${c_reset}\\n\\n" "===================================================================================================="
    success=false
else
    # Check for a space after the Jira issue
    if ! grep -q "^${jira_issue_regex} " <<<"$subject"; then
        remainder="${subject:${#jira_issue}}"
        printf "${c_error}%s${c_value}%s${c_error}%s${c_reset}\\n" "Commit message subject must have a space after the " "$jira_issue" " label"
        printf "${c_error}%s${c_reset}\\n" "===================================================================================================="
        printf "%s${c_error}%s${c_reset}%s\\n" "${jira_issue:0: -1}" "${jira_issue: -1}${remainder:0:1}" "${remainder:1:${#remainder}}"
        printf "${c_error}%s${c_reset}\\n\\n" "===================================================================================================="
        success=false
    fi

    # Check for a single space after the Jira issue
    if grep -q "^${jira_issue_regex}  " <<<"$subject"; then
        pattern="(^\\[[A-Z]+-[0-9]+)(\\] +[^ ])(.*)"
        printf "${c_error}%s${c_value}%s${c_error}%s${c_reset}\\n" "Commit message subject must have a single space after the " "$jira_issue" " label"
        printf "${c_error}%s${c_reset}\\n" "===================================================================================================="
        printf "%s${c_error}%s${c_reset}%s\\n" "$(sed -E "s/$pattern/\\1/" <<<"$subject")" "$(sed -E "s/$pattern/\\2/" <<<"$subject")" "$(sed -E "s/$pattern/\\3/" <<<"$subject")"
        printf "${c_error}%s${c_reset}\\n\\n" "===================================================================================================="
        success=false
    fi
fi

pattern="(^\\[[A-Z]+-[0-9]+\\] *)?(.*)"
jira_issue=$(sed -E "s/${pattern}/\\1/" <<<"$subject")
subject_msg=$(sed -E "s/${pattern}/\\2/" <<<"$subject")

# Check that subject message exists
case "$subject_msg" in
    "") printf "${c_error}%s${c_reset}\\n" "Must provide commit message subject"
        printf "${c_error}%s${c_reset}\\n" "===================================================================================================="
        printf "${c_error}%s${c_reset}\\n" "$subject"
        printf "${c_error}%s${c_reset}\\n\\n" "===================================================================================================="
        success=false
        ;;
    *)
        # Check subject line capitalization
        case "${subject_msg:0:1}" in
            [[:upper:]]) ;;
            *)  printf "${c_error}%s${c_reset}\\n" "Commit message subject must begin with a capitalized letter"
                printf "${c_error}%s${c_reset}\\n" "===================================================================================================="
                printf "%s${c_error}%s${c_reset}%s\\n" "${jira_issue}" "${subject_msg:0:1}" "${subject_msg:1:${#subject_msg}}"
                printf "${c_error}%s${c_reset}\\n\\n" "===================================================================================================="
                success=false
                ;;
        esac

        # Check subject line length
        subject_len=80
        if [[ "${#subject}" -gt "${subject_len}" ]]; then
            printf "${c_error}%s${c_value}%s${c_error}%s${c_reset}\\n" "Commit message subject must be no longer than " "${subject_len}" " characters"
            printf "${c_error}%s${c_reset}\\n" "===================================================================================================="
            printf "%s${c_error}%s${c_reset}\\n" "${subject:0:${subject_len}}" "${subject:${subject_len}:${#subject}}"
            printf "${c_error}%s${c_reset}\\n\\n" "===================================================================================================="
            success=false
        fi

        # Check subject line for trailing period
        case ${subject: -1} in
            \.) printf "${c_error}%s${c_reset}\\n" "Commit message subject must not end with a period"
                printf "${c_error}%s${c_reset}\\n" "===================================================================================================="
                printf "%s${c_error}%s${c_reset}\\n" "${subject:0:-1}" "${subject: -1}"
                printf "${c_error}%s${c_reset}\\n\\n" "===================================================================================================="
                success=false
                ;;
        esac

        # Check for blank line after subject
        if [[ "$(wc -l <"$commit_msg")" -gt 1 ]] && [[ -n "$(head -n +2 "$commit_msg" | tail -n 1)" ]]; then
            printf "${c_error}%s${c_reset}\\n" "Commit message must have a blank line after the subject"
            printf "${c_error}%s${c_reset}\\n" "===================================================================================================="
            printf "${c_reset}%s${c_reset}\\n" "$subject"
            printf "${c_error}%s${c_reset}\\n" "$(head -n +2 "$commit_msg" | tail -n 1)"
            printf "${c_error}%s${c_reset}\\n\\n" "===================================================================================================="
            success=false
        fi
        ;;
esac

# Check message body line length
message_line_len=100
if [[ $(awk '{print length}' "$commit_msg" | sort -nr | head -n 1) -gt "$message_line_len" ]]; then
    printf "${c_error}%s${c_value}%s${c_error}%s${c_reset}\\n" "Commit message contains lines longer than " "$message_line_len" " characters"
    printf "${c_error}%s${c_reset}\\n" "===================================================================================================="
    while read -r line; do
        printf "%s${c_error}%s${c_reset}\\n" "${line:0:${message_line_len}}" "${line:${message_line_len}:${#line}}"
    done < <(tail -n +2 <"$commit_msg")
    printf "${c_error}%s${c_reset}\\n\\n" "===================================================================================================="
    success=false
fi

$success
