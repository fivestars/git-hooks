#!/usr/bin/env bash
set -eu -o pipefail

: <<DESC
Inject the commit message into a commit message template
DESC

: <<'HELP'
If the commit is using a message template (via ${c_action}git commit -t${c_reset}, or the
${c_value}commit.template${c_reset} config value) and the commit message was provided
at the command-line with ${c_value}-m <message>${c_reset}, use the template and substitute
any ${c_value}\$SUBJECT${c_reset} placeholders in the template with the provided ${c_value}<message>${c_reset}.

If the template is not provided, or the template does not contain any
${c_value}\$SUBJECT${c_reset} placeholders, this hook will have no effect.

See ${c_value}.gitmessage.sample${c_reset} for example usage.
HELP

# Get our useful functions (be sure to provide lib path as source argument)
# shellcheck source=included/lib/core.sh
. "$(dirname "${BASH_SOURCE[@]}")/../../lib/core.sh" "$(dirname "${BASH_SOURCE[@]}")/../../lib"

# No need to do anything if we're using a previously rejected commit message
is_cached_commit_message_in_use && exit

# Decide how to proceed based on the commit type
case "${2:-}" in
    # Look for commits with a message provided by -m at command-line.
    # This means git will not prompt us to further edit the message.
    message)
        # Don't bother if this is not a new commit
        if ! commit_in_progress; then
           printf "${c_action}%s${c_reset}\\n" "Not a new commit, nothing to be done"
           exit 0
        fi

        # We will need to manually apply the template, so let's verify that it exists
        template="$(eval echo "$(git config commit.template)")" && [[ -f "$template" ]] || exit

        # Read in the provided message
        read -r -d '' message <"$1" ||:

        # Create a temporary file to assist with manipulations
        tmpfile=$(mktemp -t git-commit-msg-template.XXXX); trap 'rm -f $tmpfile' EXIT

        # Remove comments from template, since we won't be sending it through
        # the editor flow where git would do this for us automatically.
        # Then inject the $message into the $SUBJECT placeholder (if present).
        sed -e 's/^#.*//g' "$template" \
        | uniq \
        | SUBJECT="$message" envsubst "\$SUBJECT" \
        >"$1"

        ;;

    # We didn't receive a message yet, but we have a template. This means git
    # will prompt the user to edit the message. Let's strip out the $SUBJECT
    # placeholder (if present).
    template)
        tmpfile=$(mktemp -t git-commit-msg-template.XXXX); trap 'rm -f $tmpfile' EXIT
        SUBJECT="" envsubst "\$SUBJECT" <"$1" >"$tmpfile"
        mv "$tmpfile" "$1"
        ;;

    ## Unhandled commit types:
    # This is a merge commit message
    merge) printf "${c_action}%s${c_reset}\\n" "Merge commit message provided, nothing to be done"
           exit 0 ;;

    # This commit is being squashed, most likely during a rebase
    squash) printf "${c_action}%s${c_reset}\\n" "Squashing commit message, nothing to be done"
            exit 0 ;;

    # The commit message contents are already complete
    commit) printf "${c_action}%s${c_reset}\\n" "Using existing commit message, nothing to be done"
            exit 0 ;;

    # Unexpected commit message type
    *)  printf "${c_warning}%s${c_value}%s${c_warning}%s${c_reset}\\n" "Unexpected commit message type " "${2:-}" ", skipping hook:"
        exit 0 ;;
esac
